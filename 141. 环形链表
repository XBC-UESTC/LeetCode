一.快慢指针
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode p=head;
        ListNode q=head;
        int i=1;
        while(p!=null)
        {
           
            p=p.next;
            if(i%2==0) {
                q=q.next;
            }
            i++;
            if(p==q&&i!=1) return true;
        }
        return false;
    }
}

执行用时 :1 ms, 在所有 java 提交中击败了39.65%的用户
内存消耗 :37.1 MB, 在所有 java 提交中击败了97.08%的用户

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode p=head;
        // int[] flag=new int[];
        while(p!=null)
        {
            if(p.val==-999) return true;
            p.val=-999;
            p=p.next;
        }
        return false;
    }
}

执行用时 :0 ms, 在所有 java 提交中击败了100.00%的用户
内存消耗 :38 MB, 在所有 java 提交中击败了94.62%的用户
